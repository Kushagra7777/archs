---
openapi: 3.0.0
info:
  title: ao_core
  description: "AI-Agents-as-a-Service API from [aolabs.ai](https://aolabs.ai)-- a new class of AI Agents that learn locally and continously, through conditioning, like animals."
  termsOfService: https://aolabs.ai/strategy/
  contact:
    name: AO Labs
    url: https://www.aolabs.ai/
    email: aee@aolabs.ai
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Docs & Guides
  url: https://docs.aolabs.ai/
servers:
- url: https://7svo9dnzu4.execute-api.us-east-2.amazonaws.com/v0dev
  description: "aolabs on AWS v0dev, 1st effort"
- url: https://virtserver.swaggerhub.com/aolabs/ao_core/0.1.0
  description: SwaggerHub API Auto Mocking
security:
- AWSapiKey: []
tags:
- name: kennel
  description: a collection of agents representing an application
  externalDocs:
    description: Find out more
    url: https://docs.aolabs.ai/reference/ao_core-intro-overview
- name: agent
  description: "agents, unique to application endusers or local clients"
  externalDocs:
    description: Find out more
    url: https://docs.aolabs.ai/reference/ao_core-intro-overview
paths:
  /kennel:
    get:
      tags:
      - kennel
      summary: Get kennels
      description: Get a list of your kennels
      operationId: kennelGet
      parameters:
      - name: kennel_id
        in: query
        description: to view particular kennel by id
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Success - Here is a list of the application kennels you've created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Kennel'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Kennel'
        "404":
          description: No applications yet-- POST /kennel to create your first!
      security:
      - AWSapiKey: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        uri: MASKED
        responses:
          default:
            statusCode: "200"
        type: aws
        parameters:
          kennel_id: $input.params('kennel_id')
        requestTemplates:
          application/json: |-
            {
              "kennel_id" : "$input.params('kennel_id')"
            }
    post:
      tags:
      - kennel
      summary: Create kennel
      description: Upload an Arch to spawn Agents
      operationId: kennelCreate
      requestBody:
        description: to create a Kennel around an Arch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KennelCreate'
        required: true
      responses:
        "200":
          description: Success - Kennel created; you can now deloy agents using this kennel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Kennel'
        "405":
          description: Invalid input
      security:
      - AWSapiKey: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        uri: MASKED
        responses:
          default:
            statusCode: "200"
        type: aws
        parameters:
          body: $input.body
        requestTemplates:
          application/json: |-
            {
              "body" : $input.body
            }
    delete:
      tags:
      - kennel
      summary: Delete kennel
      operationId: kennelDelete
      parameters:
      - name: kennel_id
        in: query
        description: id of kennel to delete
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Kennel successfully deleted
        "400":
          description: Invalid ID supplied
        "404":
          description: Kennel not found
      security:
      - AWSapiKey: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        uri: MASKED
        responses:
          default:
            statusCode: "200"
        type: aws
        parameters:
          kennel_id: $input.params('kennel_id')
        requestTemplates:
          application/json: |-
            {
              "kennel_id" : "$input.params('kennel_id')"
            }
  /kennel/agent:
    get:
      tags:
      - agent
      summary: Agent story
      description: retrieve an agent's history and metahistory
      operationId: agentStory
      parameters:
      - name: kennel_id
        in: query
        description: id of application kennel to operate on
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: agent_id
        in: query
        description: id of particular agent
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Success - Agent story retreieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
      security:
      - AWSapiKey: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        uri: MASKED
        responses:
          default:
            statusCode: "200"
        type: aws
        parameters:
          agent_id: $input.params('agent_id')
          kennel_id: $input.params('kennel_id')
        requestTemplates:
          application/json: |-
            {
              "agent_id" : "$input.params('agent_id')",
              "kennel_id" : "$input.params('kennel_id')"
            }
    post:
      tags:
      - agent
      summary: Agent invoke
      description: post an input (with optional learning modes instinct and label) to agent to evoke its output
      operationId: agentInvoke
      requestBody:
        description: to invoke an Agent to get output
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeAgent'
        required: true
      responses:
        "200":
          description: Success - Agent invoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentResponse'
      security:
      - AWSapiKey: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        uri: MASKED
        responses:
          default:
            statusCode: "200"
        type: aws
        parameters:
          body: $input.body
        requestTemplates:
          application/json: |-
            {
              "body" : $input.body
            }
    delete:
      tags:
      - agent
      summary: Agent delete
      operationId: agentDelete
      parameters:
      - name: kennel_id
        in: query
        description: id of application kennel to operate on
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: agent_id
        in: query
        description: id of particular agent
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Agent successfully deleted
        "400":
          description: Invalid ID supplied
        "404":
          description: Agent not found
      security:
      - AWSapiKey: []
      x-amazon-apigateway-integration:
        passthroughBehavior: when_no_match
        httpMethod: POST
        uri: MASKED
        responses:
          default:
            statusCode: "200"
        type: aws
        parameters:
          agent_id: $input.params('agent_id')
          kennel_id: $input.params('kennel_id')
        requestTemplates:
          application/json: |-
            {
              "agent_id" : "$input.params('agent_id')",
              "kennel_id" : "$input.params('kennel_id')"
            }
components:
  schemas:
    Kennel:
      type: object
      properties:
        developer_id:
          type: string
          description: using v0dev for beta
        kennel_id:
          type: string
          description: generated by our backend system
        kennel_name:
          type: string
        description:
          type: string
        arch_string:
          type: string
          description: "used to spawn Agents on demand, pulled from our archs repo"
        arch_URL:
          type: string
        permissions:
          type: string
    KennelCreate:
      type: object
      properties:
        kennel_name:
          type: string
          description: "name your collection of Agents, possible after their/your application"
        arch_URL:
          type: string
          description: name or link to arch file in repo github.com/aolabsai/archs
        description:
          type: string
        permissions:
          type: string
          description: coming soon
      x-disabled-for-amazon-gateway:
        examples:
          Basic Clam Kennel:
            kennel_name: TEST-Clamologist
            arch_URL: https://github.com/aolabsai/archs/blob/main/Architectures/basic_clam.py
            description: "the simplest, atomic arch reference design, our hello, world"
            permissions: free and open as the sea!
          Netbox Device Discovery:
            kennel_name: TEST-Netbox_DeviceDiscovery
            arch_URL: https://raw.githubusercontent.com/aolabsai/archs/main/Architectures/netbox-device_discovery.py
            description: "a 30-10-neuron Agent that predicts roles of devices on Netbox, eg. https://demo.netbox.dev/dcim/devices/"
            permissions: open
    AgentResponse:
      type: object
      properties:
        state:
          type: string
          description: state counter of Agent
        story:
          type: string
          description: OUTPUT response of Agent to INPUT (will force-match LABEL if provided)
      x-disabled-for-amazon-gateway:
        examples:
          Basic Clam Agent:
            state: "2"
            story: "0"
          Netbox Device Discovery Agent:
            state: "43"
            story: "0000000100"
    InvokeAgent:
      type: object
      properties:
        kennel_id:
          type: string
          description: "globally unique id, generated during beta as v0dev/<your_kennel_name>"
        agent_id:
          type: string
          description: locally unique id matching user or customer id
        INPUT:
          type: string
          description: binary INPUT to Agent; number of binary digits is specified by Agent Arch I neurons
        LABEL:
          type: string
          description: "OPTIONAL-- binary LABEL to Agent; if provided, Agent output will match LABEL and it will learn that input<>output mapping; number of binary digits is specified by Agent Arch Z neurons"
        INSTINCTS:
          type: boolean
          description: OPTIONAL-- activates learning by instinct triggers specified in Agent Arch C neurons
        control:
          $ref: '#/components/schemas/InvokeAgent_control'
      x-disabled-for-amazon-gateway:
        examples:
          Basic Clam:
            kennel_id: v0dev/TEST-BedOfClams
            agent_id: 1st of Clams
            INPUT: "000"
            LABEL: "0"
            INSTINCTS: true
            control:
              CN: false
              CP: false
              US: true
              neuron:
                DD: true
                Hamming: true
                Default: true
          Netbox Device Discovery:
            kennel_id: v0dev/TEST-Netbox_DeviceDiscovery
            agent_id: 1st NB DD
            INPUT: "000000001100000001110000001010"
            LABEL: "0000000100"
            INSTINCTS: false
            control:
              CN: false
              CP: false
              US: true
              neuron:
                DD: true
                Hamming: true
                Default: true
    InvokeAgent_control_neuron:
      type: object
      properties:
        DD:
          type: boolean
          description: neuron look-up happens 1st according to discrimination distance (treating the lookup table 1-D weights)
        Hamming:
          type: boolean
          description: neuron look-up happens 2nd according to Hamming distance
        Default:
          type: boolean
          description: "if neither DD or Hamming converge or are disabled, neuron will default to random binary response"
      description: neuron-level learning settings
    InvokeAgent_control:
      type: object
      properties:
        CN:
          type: boolean
          description: forces a Negative (painful) learning event
        CP:
          type: boolean
          description: forces a Positive (pleasurable) learning event
        US:
          type: boolean
          description: "Agents learn sequenced info by default, so set as True if data stream is UnSequenced and needs a reset state between each data input"
        neuron:
          $ref: '#/components/schemas/InvokeAgent_control_neuron'
      description: ALL OPTIONAL-- parameters for fine-tuned control
  securitySchemes:
    AWSapiKey:
      type: apiKey
      name: X-API-KEY
      in: header